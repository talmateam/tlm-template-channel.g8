definitions:
  steps:

    - step: &QualityCode
        name: Unit test and quality code
        image: maven:3.6-jdk-11-slim
        caches:
          - maven
        script:
          - mvn -B -Dstyle.color=always -s devops/settings.xml verify
        artifacts:
          - "**/pmd.xml"
          - "**/jacoco/**"

    - step: &InstallSnapshot
        name: Install snapshot
        image: maven:3.6-jdk-11-slim
        caches:
          - maven
        script:
          - apt update; apt install -y git
          - >
            echo -e " ======================================================================================== ";
            echo -e " Upgrade de la version de desarrollo y commitea "
          - mvn build-helper:parse-version -B -Dstyle.color=always
                release:update-versions -DdevelopmentVersion='\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.incrementalVersion}-\${parsedVersion.nextBuildNumber}-SNAPSHOT'
          - mvn scm:checkin -Dusername=\$BITBUCKET_VARIABLE_GIT_USER -Dpassword=\$BITBUCKET_VARIABLE_GIT_PASS -B -Dstyle.color=always -Dmessage="[skip ci] Increment build number"
          - echo "Agregando artifactId que es ecesario para el docker"
          - mvn -q  -Dexec.executable=echo  -Dexec.args='scm.tag=\${project.version}'  --non-recursive exec:exec >> release.properties
          - mvn -q  -Dexec.executable=echo  -Dexec.args='artifactId=\${project.artifactId}'  --non-recursive exec:exec >> release.properties
          - echo 'git.rev='`git rev-parse --short HEAD` >> release.properties
          - echo 'git.url='`git remote get-url origin` >> release.properties
          - cp release.properties release.properties.backup
          - >
            echo -e " ======================================================================================== ";
            echo -e " generando el package ";
          - mvn install -Dmaven.test.skip=true  -B -Dstyle.color=always -s devops/settings.xml
        artifacts:
          - release.properties.backup
          - "**/target/**"
          - "target/**"

    - step: &InstallRelease
        name: Install release
        image: maven:3.6-jdk-11-slim
        caches:
          - maven
        script:
          - apt update; apt install -y git
          - >
            echo -e " ======================================================================================== ";
            echo -e " Quitar el snapshot, commitea, tagea, y regresa a snapshot haciendo upgrade de construccion "
          - mvn release:prepare -DscmCommentPrefix="[skip ci]" -DtagNameFormat=v@\{project.version\}
                                -Dusername=\$BITBUCKET_VARIABLE_GIT_USER -Dpassword=\$BITBUCKET_VARIABLE_GIT_PASS -s devops/settings.xml -B -Dstyle.color=always
                                -Darguments="-DskipTests -Dpmd.skip=true -Dcpd.skip=true -Dspotbugs.skip=true"
                || (
                      mvn release:rollback -B -Dstyle.color=always -DscmCommentPrefix="[skip ci] " &&
                      mvn build-helper:parse-version
                      release:update-versions -B -Dstyle.color=always
                      -DdevelopmentVersion="\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.incrementalVersion}-\${parsedVersion.nextBuildNumber}-SNAPSHOT" &&
                      mvn scm:checkin -Dusername=\$BITBUCKET_VARIABLE_GIT_USER -Dpassword=\$BITBUCKET_VARIABLE_GIT_PASS -B -Dstyle.color=always -Dmessage="[skip ci] Increment build number" &&
                      exit 1
                   )
          - echo "Agregando artifactId que es necesario para el docker"
          - echo "artifactId=`mvn help:evaluate  -Dexpression=project.artifactId -q -DforceStdout`" >> release.properties
          - cp release.properties release.properties.backup
          - >
            echo -e " ========================================================================================";
            echo -e " Bajar el ultimo release y subir al repositorio jfrog"
          - mvn release:perform -s devops/settings.xml -B -Dstyle.color=always
                                -Darguments="-DskipTests -Dpmd.skip=true -Dcpd.skip=true -Dspotbugs.skip=true -Dmaven.deploy.skip=true -Dmaven.javadoc.skip=true"
        artifacts:
          - release.properties.backup
          - "**/target/**"
          - "target/**"

    - step: &BuildDocker
        name: Build docker image
        image: atlassian/pipelines-kubectl
        services:
          - docker
        script:
          - \[ -f release.properties.backup \] && echo "Build docker" || exit -1
          - export VERSION=`grep scm.tag= release.properties.backup | awk -F"=" '{print \$2}'`
          - export ARTIFACT_ID=`grep artifactId= release.properties.backup | awk -F"=" '{print \$2}'`
          - echo "VERSION:\$VERSION"
          - docker build -f devops/Dockerfile
                         --build-arg JAR_VERSION=\$VERSION
                         --build-arg JAR_ARTIFACT_ID=\$ARTIFACT_ID
                         -t docker_image .
          - docker save --output image.docker docker_image
        artifacts:
          - release.properties.backup
          - image.docker

    - step: &DeployK8s
        name: Deploy K8S objects
        image: atlassian/pipelines-kubectl
        services:
          - docker
        script:
          - \[ -f release.properties.backup \] && echo "Build docker" || exit -1
          - apk add gettext
          - docker load --input image.docker
          - export VERSION=`grep scm.tag= release.properties.backup | awk -F"=" '{print \$2}'`
          - export DOCKER_IMAGE=`grep artifactId= release.properties.backup | awk -F"=" '{print \$2}'`
          - export PIPELINE_DOCKER_TAG="\$BITBUCKET_VARIABLE_AZURE_DOCKER_HOST/\$DOCKER_IMAGE:\$VERSION"
          - echo "PIPELINE_DOCKER_TAG:\$PIPELINE_DOCKER_TAG"
          - echo "\$BITBUCKET_VARIABLE_AZURE_DOCKER_PASS" | docker login -u \$BITBUCKET_VARIABLE_AZURE_DOCKER_USER --password-stdin \$BITBUCKET_VARIABLE_AZURE_DOCKER_HOST
          - docker tag docker_image \$PIPELINE_DOCKER_TAG
          - docker push \$PIPELINE_DOCKER_TAG
          - echo \$BITBUCKET_VARIABLE_KUBECONFIG | base64 -d > devops/KUBECONFIG
          - envsubst < devops/AKS.yml > devops/AKS-IMPL.yml
          - cat devops/AKS-IMPL.yml
          - kubectl --kubeconfig=devops/KUBECONFIG apply -f devops/AKS-IMPL.yml
          - >
            echo -e " ======================================================================================== ";
            echo -e " Preparando JSON para WSO2";
            export JSON='{ "type":           "artifact",
                           "typeOfArtifact": "Services",
                           "businessNeed":   "'`mvn help:evaluate  -Dexpression=project.name -q -DforceStdout`'",
                           "environment":    "\$BITBUCKET_DEPLOYMENT_ENVIRONMENT",
                           "name":           "'`mvn help:evaluate  -Dexpression=project.artifactId -q -DforceStdout`'",
                           "version":        "'`mvn help:evaluate -Dexpression=project.version -q -DforceStdout`'",
                           "commit":         "'`grep git.rev= release.properties.backup | awk -F"=" '{print \$2}'`'",
                           "url":            "'`grep git.url= release.properties.backup | awk -F"=" '{print \$2}'`'"
                  }'
          - echo \$JSON
          - curl -X POST "http://52.184.226.32:8080/governance/artifacts"
            -H "Authorization:Basic YWRtaW46c2VndXJpZGFkMTk="
            -H "Content-Type:application/json"
            -H "cache-control:no-cache"
            -d "\$JSON" || echo "Error en el  wso2"
        artifacts:
          - release.properties.backup
          - image.docker

    - step: &PrepareNextRelease
        name: Prepare next release
        image: maven:3.6-slim
        caches:
          - maven
        description: Luego de verificar que todo este bien en produccion, hay que preparar el siguiente release
        trigger: manual
        script:
          - mvn build-helper:parse-version versions:set -DnewVersion="\${parsedVersion.majorVersion}.\${parsedVersion.nextMinorVersion}.0-0-SNAPSHOT" # Se incremente por defecto el minor version




pipelines:
  default:
    - step: *QualityCode
  branches:
    develop:
      - step: *QualityCode
      - step: *InstallSnapshot
      - step: *BuildDocker
      - step:
          <<: *DeployK8s
          deployment: dev
          name: Deploy to develop
    master:
      - step: *QualityCode
      - step: *InstallRelease
      - step: *BuildDocker
      - step:
          <<: *DeployK8s
          deployment: uat
          name: Deploy to uat
          trigger: manual
#      - step: *PrepareNextRelease
#      - step: *BuildDocker
#      - step:
#          <<: *DeployK8s
#          deployment: develop
#      - step:
#          <<: *DeployK8s
#          deployment: uat
#      - step:
#          <<: *DeployK8s
#          deployment: staging
#      - step:
#          <<: *DeployK8s
#          deployment: prd
#      - step: *tag

